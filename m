Return-Path: <linux-kernel+bounces-822449-lists+linux-kernel=lfdr.de@vger.kernel.org>
X-Original-To: lists+linux-kernel@lfdr.de
Delivered-To: lists+linux-kernel@lfdr.de
Received: from am.mirrors.kernel.org (am.mirrors.kernel.org [IPv6:2604:1380:4601:e00::3])
	by mail.lfdr.de (Postfix) with ESMTPS id 2A5E1B83E88
	for <lists+linux-kernel@lfdr.de>; Thu, 18 Sep 2025 11:50:26 +0200 (CEST)
Received: from smtp.subspace.kernel.org (relay.kernel.org [52.25.139.140])
	(using TLSv1.2 with cipher ECDHE-ECDSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by am.mirrors.kernel.org (Postfix) with ESMTPS id AFD1A1C01061
	for <lists+linux-kernel@lfdr.de>; Thu, 18 Sep 2025 09:50:47 +0000 (UTC)
Received: from localhost.localdomain (localhost.localdomain [127.0.0.1])
	by smtp.subspace.kernel.org (Postfix) with ESMTP id 88D5E274B37;
	Thu, 18 Sep 2025 09:50:20 +0000 (UTC)
Authentication-Results: smtp.subspace.kernel.org;
	dkim=pass (2048-bit key) header.d=kernel.org header.i=@kernel.org header.b="Ie+pdK/e"
Received: from smtp.kernel.org (aws-us-west-2-korg-mail-1.web.codeaurora.org [10.30.226.201])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by smtp.subspace.kernel.org (Postfix) with ESMTPS id CA8B01F09BF
	for <linux-kernel@vger.kernel.org>; Thu, 18 Sep 2025 09:50:18 +0000 (UTC)
Authentication-Results: smtp.subspace.kernel.org; arc=none smtp.client-ip=10.30.226.201
ARC-Seal:i=1; a=rsa-sha256; d=subspace.kernel.org; s=arc-20240116;
	t=1758189019; cv=none; b=qAminX0v7sy4XoLovJbZLQ+c8ZTseU94SFT6+iHpuO4hAHAnT2cbs7qdbAzMAUjgch6i/tV+/2PleWSPAfQGwTD5aeSU3qzAcOROaefrXKBd7e9L4GBLqA6X5/4Zl5dp8KGX8edd3ByW9rRgS3jb2OJyBLHoWf/F9spka1aHOR4=
ARC-Message-Signature:i=1; a=rsa-sha256; d=subspace.kernel.org;
	s=arc-20240116; t=1758189019; c=relaxed/simple;
	bh=LXlAjqvjLvki6S1N9v2AiSOCAG7MMsrq7HAkCVLpGQs=;
	h=Date:Message-ID:From:To:Cc:Subject:In-Reply-To:References:
	 MIME-Version:Content-Type; b=Rx9T3uNM8grY9VQ78SWP5KwLjfFuXvxKFVk6XfYmUjH4zmhIrGEAl2ZWRFVpnIUtFOU6DZWEklbBrqxWZ0NubbO4bcaxChfwzrsZNOREESfUOVpuzrf29AEytbVTVwArwwHKSFc1MnUvzp7uq/p+BgGbHSiX77dp3/sp37LYrY0=
ARC-Authentication-Results:i=1; smtp.subspace.kernel.org; dkim=pass (2048-bit key) header.d=kernel.org header.i=@kernel.org header.b=Ie+pdK/e; arc=none smtp.client-ip=10.30.226.201
Received: by smtp.kernel.org (Postfix) with ESMTPSA id 5010CC4CEE7;
	Thu, 18 Sep 2025 09:50:18 +0000 (UTC)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/simple; d=kernel.org;
	s=k20201202; t=1758189018;
	bh=LXlAjqvjLvki6S1N9v2AiSOCAG7MMsrq7HAkCVLpGQs=;
	h=Date:From:To:Cc:Subject:In-Reply-To:References:From;
	b=Ie+pdK/eamOD5NCz0wTJ+wGenyQbMS0eSX9/zA+LGYU4fL6UCU5BWod9iMiAuSUkl
	 DtQnvBGhqU+mqERsXp29tTDoQ2j9OHGsWLmxsoqaese7Je9hjGFAJGdNtR/zjFcrAQ
	 kg5Q8Eishh/u9JkQp6cEuaEhPw9HCz8/7iFR2MwCnGzSKVnj5DO/UB1BJlFsUHqL8e
	 yYhVAPUtoB+UiCLx+6ybGtyWgA6JNE/9JPIiBBvH2fZklsO1H5iR0FnPeQxb5eCF+v
	 NT4b7awXgTb5AeEdLyQMUUA9uQ02P/PZnvmiCMkX1zqJ5WEZxLHxZ2kI468V93GQQg
	 lhMgrpiknx/8g==
Received: from sofa.misterjones.org ([185.219.108.64] helo=goblin-girl.misterjones.org)
	by disco-boy.misterjones.org with esmtpsa  (TLS1.3) tls TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384
	(Exim 4.98.2)
	(envelope-from <maz@kernel.org>)
	id 1uzBHL-00000007NXy-42c3;
	Thu, 18 Sep 2025 09:50:16 +0000
Date: Thu, 18 Sep 2025 10:50:15 +0100
Message-ID: <86ldmc144o.wl-maz@kernel.org>
From: Marc Zyngier <maz@kernel.org>
To: Tangnianyao <tangnianyao@huawei.com>
Cc: <tglx@linutronix.de>,
	<linux-kernel@vger.kernel.org>,
	<linux-arm-kernel@lists.infradead.org>,
	<guoyang2@huawei.com>,
	<wangwudi@hisilicon.com>,
	jiangkunkun <jiangkunkun@huawei.com>,
	<wangzhou1@hisilicon.com>,
	<guozicheng3@hisilicon.com>
Subject: Re: [PATCH] irqchip/gic-v4.1:Check whether indirect table is supported in allocate_vpe_l1_table
In-Reply-To: <cae508d5-c846-5daf-a1b8-4014f14759e5@huawei.com>
References: <20240122160607.1078960-1-tangnianyao@huawei.com>
	<86sf2p91zt.wl-maz@kernel.org>
	<5de3da53-9c0d-2a2d-876b-2181e540fa2f@huawei.com>
	<86r0i98o0a.wl-maz@kernel.org>
	<de3c10be-f4d4-75d0-bc70-0791e5217516@huawei.com>
	<86v83fmn9l.wl-maz@kernel.org>
	<cae508d5-c846-5daf-a1b8-4014f14759e5@huawei.com>
User-Agent: Wanderlust/2.15.9 (Almost Unreal) SEMI-EPG/1.14.7 (Harue)
 FLIM-LB/1.14.9 (=?UTF-8?B?R29qxY0=?=) APEL-LB/10.8 EasyPG/1.0.0 Emacs/30.1
 (aarch64-unknown-linux-gnu) MULE/6.0 (HANACHIRUSATO)
Precedence: bulk
X-Mailing-List: linux-kernel@vger.kernel.org
List-Id: <linux-kernel.vger.kernel.org>
List-Subscribe: <mailto:linux-kernel+subscribe@vger.kernel.org>
List-Unsubscribe: <mailto:linux-kernel+unsubscribe@vger.kernel.org>
MIME-Version: 1.0 (generated by SEMI-EPG 1.14.7 - "Harue")
Content-Type: text/plain; charset=US-ASCII
X-SA-Exim-Connect-IP: 185.219.108.64
X-SA-Exim-Rcpt-To: tangnianyao@huawei.com, tglx@linutronix.de, linux-kernel@vger.kernel.org, linux-arm-kernel@lists.infradead.org, guoyang2@huawei.com, wangwudi@hisilicon.com, jiangkunkun@huawei.com, wangzhou1@hisilicon.com, guozicheng3@hisilicon.com
X-SA-Exim-Mail-From: maz@kernel.org
X-SA-Exim-Scanned: No (on disco-boy.misterjones.org); SAEximRunCond expanded to false

On Thu, 18 Sep 2025 03:56:04 +0100,
Tangnianyao <tangnianyao@huawei.com> wrote:
> 
> 
> 
> On 5/15/2024 17:34, Marc Zyngier wrote:
> > On Wed, 15 May 2024 09:56:10 +0100,
> > Tangnianyao <tangnianyao@huawei.com> wrote:
> >>
> >>
> >> On 1/22/2024 22:02, Marc Zyngier wrote:
> >>> On Mon, 22 Jan 2024 13:13:09 +0000,
> >>> Tangnianyao <tangnianyao@huawei.com> wrote:
> >>>> On 1/22/2024 17:00, Marc Zyngier wrote:
> >>>>> [Fixing the LKML address, which has bits of Stephan's address embedded
> >>>>> in it...]
> >>>>>
> >>>>> On Mon, 22 Jan 2024 16:06:07 +0000,
> >>>>> Nianyao Tang <tangnianyao@huawei.com> wrote:
> >>>>>> In allocate_vpe_l1_table, when we fail to inherit VPE table from other
> >>>>>> redistributors or ITSs, and we allocate a new vpe table for current common 
> >>>>>> affinity field without checking whether indirect table is supported.
> >>>>>> Let's fix it.
> >>>>> Is there an actual implementation that doesn't support the indirect
> >>>>> property for the VPE table? I know this is allowed for consistency
> >>>>> with the original revision of the architecture, but I never expected
> >>>>> an actual GICv4.1 implementation to be *that* bad.
> >>>>>
> >>>>> If that's the case, I'm a bit puzzled/worried.
> >>>> I met this problem in a developing implementation and find it's allowed by GIC spec.
> >>>> In such environment,  in a common affinity field with only redistributors and without
> >>>> any ITS in it, forcing its_vpe_id_alloc to allocate a large vpeid(like 65000), and there
> >>>> comes an error message "VPE IRQ allocation failure". It originally comes from
> >>>> allocate_vpe_l2_table, reading GICR_VPROPBASER with GICR_VPROPBASER_4_1_SIZE=1
> >>>> and GICR_VPROPBASER_4_1_INDIRECT=0.
> >>> Really, you should get your HW engineers to fix their GIC
> >>> implementation.  I'm OK with working around this issue for
> >>> completeness, but shipping such an implementation would be a mistake.
> >>>
> >>> [...]
> >>>
> >>>> I have another question here. The max number of pages  for GITS_BASER
> >>>> and GICR_VPROPBASER is different here, while GITS_BASER.Size is
> >>>> bit[7:0] with max 256, and GICR_4_1_VPROPBASER.Size is bit[6:0] with max 128.
> >>>> Kernel usually probe ITS basers first and then probe GICR_4_1_VPROPBASER in
> >>>> a common affinity group. Maybe we need to check this in "inherit_vpe_l1_table_from_its" ?
> >>> This is because GITS_BASER[] is generic (also works for devices and
> >>> collections), while GICR_VPROPBASER is tailored to the VPE table which
> >>> is usually smaller.
> >>>
> >>> I would expect that GICD_TYPER2.VID reports something that cannot
> >>> result in something going wrong (in this case, the L1 allocation
> >>> cannot be more than 128 pages).
> >>>
> >>> Overall, the kernel isn't a validation suite for the HW, and we expect
> >>> it to have some level of sanity. So if none of this is in shipping HW
> >>> but only in some model with crazy parameters, I don't think we should
> >>> go out of our way to support it.
> >>>
> >>> Thanks,
> >>>
> >>> 	M.
> >>>
> >> Hi Marc,
> >> Friendly ping. Do we have plan to fix this problem on kernel, or any other plan ?
> > Hi Nianyao,
> >
> > My earlier question still stand: is this something that affects a
> > shipping implementation? If not, then I don't think we should support
> > this upstream, as this doesn't seem like a realistic configuration.
> >
> > If your employer has actually built this (which I still consider as a
> > mistake), then we can add the workaround I suggested.
> >
> > Thanks,
> >
> > 	M.
> >
> Hi Marc,
> 
> For GIC4.1 of HIP09,HIP10,HIP10C, it only support one-level vcpu table and GITS_BASER<n>.Indirect
> is RAZ/WI. It implements page size 16KB and entry size 32B,  each page support 512 vpe, and our
> clients have requirement 1 or 2 pages at most, so it just supports flat page to simplify implementation.
> 
> Our designer has confirmed with ARM architect that we can waive this rule:
> Quote from GIC spec 12.19.1 GITS_BASER<n> description, if the maximum width of the scaling factor
> that is identified by GITS_BASER<n>.Type and the smallest page size that is supported result in a single
> level table that requires multiple pages, then implementing this bit
> as RAZ/WI is DEPRECATED.

I can read the spec just as well. Doesn't make it a good option.

> We have actually built this in HIP09,HIP10,HIP10C and would like to
> fix this in kernel.

Isn't that the broken systems that can't even do vSGIs properly?

> Can we merge the above bug-fix patch to kernel?  Or we need to fix with errata for HIP09,HIP10,HIP10C?

Frankly, I've completely lost track of what this patch is doing. This
has been going on for over 18 months, and you have been silent on the
subject for over a year. What do you expect?

If you want anything to be done on this front, please repost a patch,
and we'll review it again.

	M.

-- 
Without deviation from the norm, progress is not possible.

