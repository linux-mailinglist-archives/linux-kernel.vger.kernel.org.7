Return-Path: <linux-kernel+bounces-863454-lists+linux-kernel=lfdr.de@vger.kernel.org>
X-Original-To: lists+linux-kernel@lfdr.de
Delivered-To: lists+linux-kernel@lfdr.de
Received: from am.mirrors.kernel.org (am.mirrors.kernel.org [147.75.80.249])
	by mail.lfdr.de (Postfix) with ESMTPS id 9B685BF7E28
	for <lists+linux-kernel@lfdr.de>; Tue, 21 Oct 2025 19:26:10 +0200 (CEST)
Received: from smtp.subspace.kernel.org (relay.kernel.org [52.25.139.140])
	(using TLSv1.2 with cipher ECDHE-ECDSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by am.mirrors.kernel.org (Postfix) with ESMTPS id 9CD6A19C5CE0
	for <lists+linux-kernel@lfdr.de>; Tue, 21 Oct 2025 17:26:21 +0000 (UTC)
Received: from localhost.localdomain (localhost.localdomain [127.0.0.1])
	by smtp.subspace.kernel.org (Postfix) with ESMTP id F1FEEEAC7;
	Tue, 21 Oct 2025 17:22:31 +0000 (UTC)
Received: from foss.arm.com (foss.arm.com [217.140.110.172])
	by smtp.subspace.kernel.org (Postfix) with ESMTP id 1A57034C130;
	Tue, 21 Oct 2025 17:22:27 +0000 (UTC)
Authentication-Results: smtp.subspace.kernel.org; arc=none smtp.client-ip=217.140.110.172
ARC-Seal:i=1; a=rsa-sha256; d=subspace.kernel.org; s=arc-20240116;
	t=1761067351; cv=none; b=CY51sd7Ni3wt1dEZijYRj+t+st5wUZAAaB0j0uSO9+MFTaXi0b/K5jmHSPo5CsTaxb2NjKt8PzWp7hsO/T/kX2rSS4H8r8GNNzKLKDfl+lUVVpUOOxQsgUUnBRMsflcXDzGLJUbX4aT8g365bspAqvbdjZNnsbol4mAEXCtVLfE=
ARC-Message-Signature:i=1; a=rsa-sha256; d=subspace.kernel.org;
	s=arc-20240116; t=1761067351; c=relaxed/simple;
	bh=etBXNma3PmaGcJJkBD95UsKT/Ifa4aKPd/xQ1JAsiMU=;
	h=Date:From:To:Cc:Subject:Message-ID:References:MIME-Version:
	 Content-Type:Content-Disposition:In-Reply-To; b=so2LvtRXTtzhXSWytLXgpyLgqJMzCcQvcesbUb4nNMBCsXg2KVT1JZ9Ch726mcsu2DBO9TCGDM5hIbnlal9YjsIDxq32zC0GugSIAOPNzoHYAUlT3LpW77rQOWr7sJbp6AVb4X1dLrDP8f0QvXLz580Ai7ZM0sR9J6rCcI8p1sU=
ARC-Authentication-Results:i=1; smtp.subspace.kernel.org; dmarc=pass (p=none dis=none) header.from=arm.com; spf=pass smtp.mailfrom=arm.com; arc=none smtp.client-ip=217.140.110.172
Authentication-Results: smtp.subspace.kernel.org; dmarc=pass (p=none dis=none) header.from=arm.com
Authentication-Results: smtp.subspace.kernel.org; spf=pass smtp.mailfrom=arm.com
Received: from usa-sjc-imap-foss1.foss.arm.com (unknown [10.121.207.14])
	by usa-sjc-mx-foss1.foss.arm.com (Postfix) with ESMTP id DF6672F;
	Tue, 21 Oct 2025 10:22:18 -0700 (PDT)
Received: from localhost (e132581.arm.com [10.1.196.87])
	by usa-sjc-imap-foss1.foss.arm.com (Postfix) with ESMTPSA id 5B5653F63F;
	Tue, 21 Oct 2025 10:22:26 -0700 (PDT)
Date: Tue, 21 Oct 2025 18:22:24 +0100
From: Leo Yan <leo.yan@arm.com>
To: James Clark <james.clark@linaro.org>
Cc: Mike Leach <mike.leach@linaro.org>,
	Suzuki K Poulose <suzuki.poulose@arm.com>,
	Alexander Shishkin <alexander.shishkin@linux.intel.com>,
	Jonathan Corbet <corbet@lwn.net>, coresight@lists.linaro.org,
	linux-arm-kernel@lists.infradead.org, linux-kernel@vger.kernel.org,
	linux-doc@vger.kernel.org
Subject: Re: [PATCH v3 4/5] coresight: Add format attribute for setting the
 timestamp interval
Message-ID: <20251021172224.GO281971@e132581.arm.com>
References: <20251002-james-cs-syncfreq-v3-0-fe5df2bf91d1@linaro.org>
 <20251002-james-cs-syncfreq-v3-4-fe5df2bf91d1@linaro.org>
 <CAJ9a7Vj1NnikoJyabXnad+=3SDULKCyqoZiNb_S66SkG+HD+dw@mail.gmail.com>
 <bfce6b68-783f-4aa1-b9db-d905230be609@linaro.org>
Precedence: bulk
X-Mailing-List: linux-kernel@vger.kernel.org
List-Id: <linux-kernel.vger.kernel.org>
List-Subscribe: <mailto:linux-kernel+subscribe@vger.kernel.org>
List-Unsubscribe: <mailto:linux-kernel+unsubscribe@vger.kernel.org>
MIME-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Content-Disposition: inline
In-Reply-To: <bfce6b68-783f-4aa1-b9db-d905230be609@linaro.org>

On Wed, Oct 15, 2025 at 04:19:04PM +0100, James Clark wrote:

[...]

> > > -static int etm4_config_timestamp_event(struct etmv4_drvdata *drvdata)
> > > +static int etm4_config_timestamp_event(struct etmv4_drvdata *drvdata,
> > > +                                      struct perf_event_attr *attr)
> > >   {
> > >          int ctridx;
> > >          int rselector;
> > >          struct etmv4_config *config = &drvdata->config;
> > > +       u8 ts_level = ATTR_CFG_GET_FLD(attr, ts_level);
> > > +
> > > +       /* Disable when ts_level == MAX */
> > > +       if (ts_level == FIELD_GET(ATTR_CFG_FLD_ts_level_MASK, UINT_MAX))
> > > +               return 0;
> > > 
> > 
> > Returning 0 from this function _enables_ the timestamps
> > 
> 
> Returning 0 just means that etm4_parse_event_config() doesn't exit with an
> error. For ts_level == MAX we want to disable timestamps generated by the
> counter, but we still want the minimum periodic timestamps.
> 
> To disable all timestamps you'd need to have attr->config & BIT(ETM_OPT_TS)
> == false. This is set by the "timestamp" format flag which I tried to
> explain that in the docs change.
> 
> I could also change the comment to say "/* Disable counter generated
> timestamps with ts_level == MAX */"
> 
> It's unfortunate that there are now two format options for timestamps. Maybe
> instead of adding a second option we can change "timestamp" from a 1 bit
> field to 4 bits, with the following meanings:
> 
>  0:     No counter timestamps or SYNC timestamps
>  1-14:  Counter timestamps = 2 ^ x. Plus SYNC timestamps
>  15:    Only SYNC timestamps

I am just wandering how can extend "timestamp" from 1 bit to 4 bits.

  #define ETM_OPT_TS              28
  #define ETM_OPT_RETSTK          29

  PMU_FORMAT_ATTR(timestamp,      "config:" __stringify(ETM_OPT_TS));
  PMU_FORMAT_ATTR(retstack,       "config:" __stringify(ETM_OPT_RETSTK));

"retstack" has occupied a higher bit, we cannot naturelly extend
"timestamp" field?

Even we can extend "timestamp" format to 4 bits, it will be mess when
run the updated perf on old kernels.  Let's see an example:

  perf record -e cs_etm/timestamp=0/ -- test
  perf record -e cs_etm/timestamp=2/ -- test

Because the lowest bit is cleared for both timestamp=0 and timestamp=2,
the old kernel support only one bit always treats these two setting as
timestamp disabled, or the perf tool needs to do extra checking for
old kernel.

> Now we basically have the same meanings except you also have to set the
> timestamp bit. Seems a bit pointless.

> Previous versions of Perf were hard coding the timestamp format bit rather
> than reading it out of
> "/sys/bus/event_source/devices/cs_etm/format/timestamp" though:
> 
> -       /* All good, let the kernel know */
> -       evsel->core.attr.config |= (1 << ETM_OPT_TS);
> 
> For that reason we'd have to leave that one where it is for backwards
> compatibility. If it's set it would be equivalent to the new wider timestamp
> field == 1.

Are you suggesting the timestamp field to be extended to two
non-consecutive fields?

For me, this is even worse than current two discrete formats. The reason
is it is complex in implementation, and it is not directive for usage
(users need to digest the field for three different semantics: on/off,
counter, and SYNC mode only).

Thanks,
Leo

> I don't know if there's any precedent for changing the bitfield that backs a
> format field, but presumably that's the point of publishing them in files
> rather than a header.


> 
> > >          /* No point in trying if we don't have at least one counter */
> > >          if (!drvdata->nr_cntr)
> > > @@ -667,12 +674,8 @@ static int etm4_config_timestamp_event(struct etmv4_drvdata *drvdata)
> > >                  return -ENOSPC;
> > >          }
> > > 
> > > -       /*
> > > -        * Initialise original and reload counter value to the smallest
> > > -        * possible value in order to get as much precision as we can.
> > > -        */
> > > -       config->cntr_val[ctridx] = 1;
> > > -       config->cntrldvr[ctridx] = 1;
> > > +       /* Initialise original and reload counter value. */
> > > +       config->cntr_val[ctridx] = config->cntrldvr[ctridx] = 1 << ts_level;
> > > 
> > >          /*
> > >           * Trace Counter Control Register TRCCNTCTLRn
> > > @@ -762,7 +765,7 @@ static int etm4_parse_event_config(struct coresight_device *csdev,
> > >                   * order to correlate instructions executed on different CPUs
> > >                   * (CPU-wide trace scenarios).
> > >                   */
> > > -               ret = etm4_config_timestamp_event(drvdata);
> > > +               ret = etm4_config_timestamp_event(drvdata, attr);
> > > 
> > >                  /*
> > >                   * No need to go further if timestamp intervals can't
> > > 
> > > --
> > > 2.34.1
> > > 
> > 
> > Regards
> > 
> > 
> > Mike
> > 
> > --
> > Mike Leach
> > Principal Engineer, ARM Ltd.
> > Manchester Design Centre. UK
> 

